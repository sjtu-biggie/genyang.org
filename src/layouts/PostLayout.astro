---
import BaseLayout from './BaseLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';

export interface Props {
  title: string;
  description?: string;
  pubDate: Date;
  updatedDate?: Date;
  author?: string;
  image?: string;
  tags?: string[];
}

const { title, description, pubDate, updatedDate, author, image, tags = [] } = Astro.props;
const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
---

<BaseLayout title={title} description={description} image={image}>
  <article>
    <h1 class="post-title">{title}</h1>
    
    <div class="post-meta">
      <time>
        <FormattedDate date={pubDate} />
      </time>
      {author && (
        <span class="post-author">{author}</span>
      )}
      {updatedDate && (
        <span class="post-updated">
          Updated: <FormattedDate date={updatedDate} />
        </span>
      )}
      {tags.length > 0 && (
        <span class="post-tags">
          {tags.map((tag) => (
            <a href={`${base}tags/${tag}/`}>{tag}</a>
          ))}
        </span>
      )}
    </div>
    
    {image && (
      <figure class="post-cover">
        <img src={image} alt={title} />
      </figure>
    )}
    
    <div class="post-content">
      <slot />
    </div>
  </article>
  
  <script>
    // Code copy functionality
    document.addEventListener('DOMContentLoaded', () => {
      const codeBlocks = document.querySelectorAll('pre.astro-code');
      
      codeBlocks.forEach((block) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'highlight';
        block.parentNode?.insertBefore(wrapper, block);
        wrapper.appendChild(block);
        
        const lang = block.getAttribute('data-language') || 'text';
        
        const titleDiv = document.createElement('div');
        titleDiv.className = 'code-title';
        titleDiv.textContent = lang;
        
        if (navigator.clipboard) {
          const button = document.createElement('button');
          button.className = 'copy-button';
          button.textContent = 'Copy';
          
          button.addEventListener('click', async () => {
            const code = block.textContent || '';
            try {
              await navigator.clipboard.writeText(code);
              button.textContent = 'Copied';
              setTimeout(() => {
                button.textContent = 'Copy';
              }, 1000);
            } catch (err) {
              console.error('Failed to copy:', err);
            }
          });
          
          titleDiv.appendChild(button);
        }
        
        wrapper.insertBefore(titleDiv, block);
      });
    });
  </script>
  
  <!-- Twitter embed script -->
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</BaseLayout>