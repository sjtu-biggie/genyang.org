---
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="HFT Trading Dashboard" description="Real-time monitoring and control for high-frequency trading systems">
  <div class="dashboard-container">
    <div class="dashboard-header">
      <h1>$ ./trading_system --mode=dashboard</h1>
      <div class="system-status">
        <span class="status-indicator" id="system-status">‚óè</span>
        <span>System Status: <span id="status-text"></span></span>
      </div>
    </div>

    <div class="dashboard-grid">
      <!-- Control Panel -->
      <div class="panel control-panel">
        <h2>System Control</h2>
        <div class="control-buttons">
          <button id="start-btn" class="control-btn start-btn">‚ñ∂ START</button>
          <button id="stop-btn" class="control-btn stop-btn">‚è∏ STOP</button>
        </div>
        <div class="control-status">
          <span class="status-label">Status:</span>
          <span id="control-status" class="status-value">READY</span>
        </div>
      </div>

      <!-- System Health Panel -->
      <div class="panel system-health">
        <h2>System Health</h2>
        <div class="metrics-grid">
          <div class="metric">
            <span class="metric-label">CPU Usage</span>
            <span class="metric-value" id="cpu-usage">--</span>
          </div>
          <div class="metric">
            <span class="metric-label">Memory</span>
            <span class="metric-value" id="memory-usage">--</span>
          </div>
          <div class="metric">
            <span class="metric-label">Network</span>
            <span class="metric-value" id="network-latency">--</span>
          </div>
          <div class="metric">
            <span class="metric-label">Market Data</span>
            <span class="metric-value" id="market-data-rate">--</span>
          </div>
        </div>
      </div>

      <!-- Portfolio Overview -->
      <div class="panel portfolio">
        <h2>Portfolio Overview</h2>
        <div class="portfolio-stats">
          <div class="stat">
            <span class="stat-label">Total P&L</span>
            <span class="stat-value positive" id="total-pnl">$--</span>
          </div>
          <div class="stat">
            <span class="stat-label">Daily P&L</span>
            <span class="stat-value" id="daily-pnl">$--</span>
          </div>
          <div class="stat">
            <span class="stat-label">Position Count</span>
            <span class="stat-value" id="position-count">--</span>
          </div>
          <div class="stat">
            <span class="stat-label">Exposure</span>
            <span class="stat-value" id="exposure">$--</span>
          </div>
        </div>
      </div>

      <!-- Active Strategies -->
      <div class="panel strategies">
        <h2>Active Strategies</h2>
        <div class="strategy-list">
          <div class="strategy-item">
            <span class="strategy-name">Market Making - SPY</span>
            <span class="strategy-status running">RUNNING</span>
          </div>
          <div class="strategy-item">
            <span class="strategy-name">Arbitrage - ETF</span>
            <span class="strategy-status paused">PAUSED</span>
          </div>
          <div class="strategy-item">
            <span class="strategy-name">Momentum - Tech</span>
            <span class="strategy-status stopped">STOPPED</span>
          </div>
        </div>
      </div>

      <!-- Market Data Feed -->
      <div class="panel market-data">
        <h2>Market Data Feed</h2>
        <div class="data-stream">
          <div class="stream-item">
            <span class="symbol">SPY</span>
            <span class="price">$423.45</span>
            <span class="change positive">+0.12%</span>
          </div>
          <div class="stream-item">
            <span class="symbol">QQQ</span>
            <span class="price">$367.89</span>
            <span class="change negative">-0.05%</span>
          </div>
          <div class="stream-item">
            <span class="symbol">IWM</span>
            <span class="price">$218.76</span>
            <span class="change positive">+0.23%</span>
          </div>
        </div>
      </div>

      <!-- Risk Monitor -->
      <div class="panel risk-monitor">
        <h2>Risk Monitor</h2>
        <div class="risk-metrics">
          <div class="risk-item">
            <span class="risk-label">VaR (95%)</span>
            <span class="risk-value">$25,430</span>
            <div class="risk-bar">
              <div class="risk-fill" style="width: 45%;"></div>
            </div>
          </div>
          <div class="risk-item">
            <span class="risk-label">Max Drawdown</span>
            <span class="risk-value">-2.34%</span>
            <div class="risk-bar">
              <div class="risk-fill" style="width: 23%;"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Trading Log -->
      <div class="panel trading-log">
        <h2>Recent Trades</h2>
        <div class="log-container" id="trades-container">
          <div class="no-trades">No recent trades available</div>
        </div>
      </div>
    </div>

    <div class="dashboard-notice">
      <h2>‚ö†Ô∏è Development Notice</h2>
      <p>
        This dashboard is currently in development. It represents the planned interface for monitoring and controlling 
        the high-frequency trading system. Real-time data integration will be implemented as the backend trading 
        system components are completed.
      </p>
      <div class="progress-info">
        <h3>Implementation Roadmap:</h3>
        <ul>
          <li>‚úÖ Static dashboard layout and design</li>
          <li>üîÑ WebSocket integration for real-time updates</li>
          <li>üìã Trading system backend development</li>
          <li>üìã Risk management integration</li>
          <li>üìã Historical data visualization</li>
        </ul>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  .dashboard-header {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--accent);
  }
  
  .dashboard-header h1 {
    margin: 0;
  }
  
  .system-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: 'Fira Code', monospace;
  }
  
  .status-indicator {
    font-size: 1.2rem;
    color: #fbbf24;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  
  .dashboard-grid {
    display: grid;
    gap: 1.5rem;
    margin-bottom: 3rem;
  }
  
  @media (min-width: 768px) {
    .dashboard-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    .dashboard-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  .panel {
    border: 1px solid var(--accent);
    border-radius: 8px;
    padding: 1.5rem;
    background: rgba(var(--accent-rgb), 0.03);
  }
  
  .panel h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--accent);
    font-size: 1.1rem;
  }
  
  /* Control Panel */
  .control-buttons {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .control-btn {
    flex: 1;
    padding: 0.75rem 1rem;
    border: none;
    border-radius: 6px;
    font-family: 'Fira Code', monospace;
    font-weight: bold;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .start-btn {
    background: #22c55e;
    color: white;
  }
  
  .start-btn:hover {
    background: #16a34a;
  }
  
  .stop-btn {
    background: #ef4444;
    color: white;
  }
  
  .stop-btn:hover {
    background: #dc2626;
  }
  
  .control-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  .control-status {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .status-label {
    font-size: 0.9rem;
    color: var(--color-secondary);
  }
  
  .status-value {
    font-family: 'Fira Code', monospace;
    font-weight: bold;
    color: var(--accent);
  }
  
  .no-trades {
    text-align: center;
    color: var(--color-secondary);
    font-style: italic;
    padding: 2rem;
  }
  
  /* System Health Panel */
  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .metric {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .metric-label {
    font-size: 0.8rem;
    color: var(--color-secondary);
  }
  
  .metric-value {
    font-family: 'Fira Code', monospace;
    font-weight: bold;
    color: var(--accent);
  }
  
  /* Portfolio Panel */
  .portfolio-stats {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .stat {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .stat-label {
    font-size: 0.9rem;
    color: var(--color-secondary);
  }
  
  .stat-value {
    font-family: 'Fira Code', monospace;
    font-weight: bold;
  }
  
  .stat-value.positive {
    color: #22c55e;
  }
  
  .stat-value.negative {
    color: #ef4444;
  }
  
  /* Strategies Panel */
  .strategy-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .strategy-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-radius: 4px;
    background: rgba(var(--accent-rgb), 0.05);
  }
  
  .strategy-name {
    font-size: 0.9rem;
  }
  
  .strategy-status {
    font-size: 0.7rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-weight: bold;
  }
  
  .strategy-status.running {
    background: #22c55e;
    color: white;
  }
  
  .strategy-status.paused {
    background: #f59e0b;
    color: white;
  }
  
  .strategy-status.stopped {
    background: #6b7280;
    color: white;
  }
  
  /* Market Data Panel */
  .data-stream {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .stream-item {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 4px;
    background: rgba(var(--accent-rgb), 0.05);
    font-family: 'Fira Code', monospace;
    font-size: 0.9rem;
  }
  
  .symbol {
    font-weight: bold;
  }
  
  .price {
    text-align: center;
  }
  
  .change {
    text-align: right;
  }
  
  .change.positive {
    color: #22c55e;
  }
  
  .change.negative {
    color: #ef4444;
  }
  
  /* Risk Monitor Panel */
  .risk-metrics {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .risk-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .risk-label {
    font-size: 0.8rem;
    color: var(--color-secondary);
  }
  
  .risk-value {
    font-family: 'Fira Code', monospace;
    font-weight: bold;
  }
  
  .risk-bar {
    width: 100%;
    height: 6px;
    background: rgba(var(--accent-rgb), 0.2);
    border-radius: 3px;
    overflow: hidden;
  }
  
  .risk-fill {
    height: 100%;
    background: var(--accent);
    transition: width 0.3s ease;
  }
  
  /* Trading Log Panel */
  .trading-log {
    grid-column: span 2;
  }
  
  @media (min-width: 1024px) {
    .trading-log {
      grid-column: span 3;
    }
  }
  
  .log-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .log-entry {
    display: grid;
    grid-template-columns: auto auto 1fr auto auto;
    gap: 1rem;
    padding: 0.5rem;
    border-radius: 4px;
    background: rgba(var(--accent-rgb), 0.05);
    font-family: 'Fira Code', monospace;
    font-size: 0.85rem;
    align-items: center;
  }
  
  .timestamp {
    color: var(--color-secondary);
  }
  
  .action {
    padding: 0.2rem 0.5rem;
    border-radius: 3px;
    font-weight: bold;
    font-size: 0.7rem;
  }
  
  .action.buy {
    background: #22c55e;
    color: white;
  }
  
  .action.sell {
    background: #ef4444;
    color: white;
  }
  
  .symbol {
    font-weight: bold;
  }
  
  .quantity {
    text-align: right;
  }
  
  .price {
    text-align: right;
  }
  
  /* Development Notice */
  .dashboard-notice {
    margin-top: 3rem;
    padding: 2rem;
    border: 2px solid #f59e0b;
    border-radius: 8px;
    background: rgba(245, 158, 11, 0.05);
  }
  
  .dashboard-notice h2 {
    color: #f59e0b;
    margin-top: 0;
  }
  
  .progress-info h3 {
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .progress-info ul {
    list-style: none;
    padding: 0;
  }
  
  .progress-info li {
    padding: 0.25rem 0;
    font-family: 'Fira Code', monospace;
  }
</style>

<script>
  // Animated typing effect for system status
  function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
      if (i < text.length) {
        element.innerHTML += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    }
    type();
  }
  
  // System status messages
  const statusMessages = [
    'Initializing trading engine...',
    'Connecting to market data feeds...',
    'Loading risk parameters...',
    'System ready for trading',
    'Monitoring 127 instruments',
    'Latency: 0.34ms avg'
  ];
  
  let currentMessage = 0;
  
  function updateSystemStatus() {
    const statusElement = document.getElementById('status-text');
    const indicatorElement = document.getElementById('system-status');
    
    if (statusElement && indicatorElement) {
      typeWriter(statusElement, statusMessages[currentMessage]);
      
      // Update indicator color based on status
      if (currentMessage < 3) {
        indicatorElement.style.color = '#f59e0b'; // Orange - initializing
      } else {
        indicatorElement.style.color = '#22c55e'; // Green - ready
      }
      
      currentMessage = (currentMessage + 1) % statusMessages.length;
    }
  }
  
  // Recent trades functionality
  let tradesData = [];
  const API_BASE = 'http://172.24.190.166:8080';
  
  async function fetchExecutions() {
    try {
      const response = await fetch(`${API_BASE}/api/executions`);
      if (response.ok) {
        const data = await response.json();
        tradesData = data.executions || [];
        updateTradesDisplay();
      } else {
        console.warn('Failed to fetch executions:', response.status);
      }
    } catch (error) {
      console.warn('Error fetching executions:', error);
    }
  }
  
  function updateTradesDisplay() {
    const container = document.getElementById('trades-container');
    if (!container) return;
    
    if (tradesData.length === 0) {
      container.innerHTML = '<div class="no-trades">No recent trades available</div>';
      return;
    }
    
    // Show last 10 trades, most recent first
    const recentTrades = tradesData.slice(-10).reverse();
    
    container.innerHTML = recentTrades.map(trade => `
      <div class="log-entry">
        <span class="timestamp">${trade.timestamp}</span>
        <span class="action ${trade.action.toLowerCase()}">${trade.action}</span>
        <span class="symbol">${trade.symbol}</span>
        <span class="quantity">${trade.quantity}</span>
        <span class="price">$${trade.price}</span>
      </div>
    `).join('');
  }
  
  // Control panel functionality
  async function sendControlCommand(action) {
    try {
      const response = await fetch(`${API_BASE}/api/control/${action}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const result = await response.json();
        updateControlStatus(action === 'start' ? 'RUNNING' : 'STOPPED');
        console.log('Control command successful:', result);
      } else {
        console.error('Control command failed:', response.status);
        updateControlStatus('ERROR');
      }
    } catch (error) {
      console.error('Error sending control command:', error);
      updateControlStatus('ERROR');
    }
  }
  
  function updateControlStatus(status) {
    const statusElement = document.getElementById('control-status');
    if (statusElement) {
      statusElement.textContent = status;
      
      // Update button states
      const startBtn = document.getElementById('start-btn');
      const stopBtn = document.getElementById('stop-btn');
      
      if (startBtn && stopBtn) {
        if (status === 'RUNNING') {
          startBtn.disabled = true;
          stopBtn.disabled = false;
        } else if (status === 'STOPPED') {
          startBtn.disabled = false;
          stopBtn.disabled = true;
        } else {
          startBtn.disabled = false;
          stopBtn.disabled = false;
        }
      }
    }
  }
  
  // Start status updates when page loads
  document.addEventListener('DOMContentLoaded', () => {
    updateSystemStatus();
    
    // Set up control button handlers
    const startBtn = document.getElementById('start-btn');
    const stopBtn = document.getElementById('stop-btn');
    
    if (startBtn) {
      startBtn.addEventListener('click', () => sendControlCommand('start'));
    }
    if (stopBtn) {
      stopBtn.addEventListener('click', () => sendControlCommand('stop'));
    }
    
    // Fetch initial trades data
    fetchExecutions();
    
    // Set up periodic updates
    setInterval(updateSystemStatus, 3000);
    setInterval(fetchExecutions, 1000); // Update trades every 1 second
  });
</script>